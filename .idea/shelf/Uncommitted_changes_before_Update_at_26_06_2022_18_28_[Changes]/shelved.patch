Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9 (Backend-Podfy)\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyCharmProfessionalAdvertiser\">\r\n    <option name=\"shown\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 80c818b1fb69e5ed0e34dc7a5c2def3d84bb8186)
+++ b/.idea/misc.xml	(date 1656266993690)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (Backend-Podfy)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (ES)" project-jdk-type="Python SDK" />
   <component name="PyCharmProfessionalAdvertiser">
     <option name="shown" value="true" />
   </component>
Index: Back/Podfy.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Back.Utils import *\r\n\r\nBuilder.load_file(\"Front/screen_manager.kv\")\r\nBuilder.load_file(\"Front/Home.kv\")\r\nBuilder.load_file(\"Front/Cadastro.kv\")\r\nBuilder.load_file(\"Front/Pesquisa.kv\")\r\nBuilder.load_file(\"Front/Configuracoes.kv\")\r\nBuilder.load_file(\"Front/Playlists.kv\")\r\nBuilder.load_file(\"Front/Downloads.kv\")\r\n\r\napp = Flask(__name__)\r\n\r\n\r\nclass Podfy(MDApp):\r\n\r\n    #Importação de Fontes\r\n    inter_regular = os.path.join(os.path.dirname('Back'), 'Front','resources', 'fontes', 'Inter', 'static', 'Inter-Regular.ttf')\r\n    inter_medium = os.path.join(os.path.dirname('Back'), 'Front','resources', 'fontes', 'Inter', 'static', 'Inter-Medium.ttf')\r\n    inter_semibold = os.path.join(os.path.dirname('Back'), 'Front','resources', 'fontes', 'Inter', 'static', 'Inter-SemiBold.ttf')\r\n    inter_bold = os.path.join(os.path.dirname('Back'), 'Front','resources', 'fontes', 'Inter', 'static', 'Inter-Bold.ttf')\r\n\r\n    #Importação de imagens e ícones\r\n    podfy_logo_white = os.path.join (os.path.dirname('Back'), 'Front','resources', 'podfy-logo-whitebg.jpg')\r\n    podfy_mini_logo = os.path.join(os.path.dirname('Back'), 'Front','resources','img','bar-podfy-logo.png')\r\n    podfy_mini_logo_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','bar-podfy-logo_hover.png')\r\n    app_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','icon.png')\r\n    \r\n    user_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','profile_icon.png')\r\n    user_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','profile_icon_hover.png')\r\n\r\n    home_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','home.png')\r\n    home_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','home-1.png')\r\n\r\n    bars_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','bars.png')\r\n    bars_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','bars-1.png')\r\n\r\n    search_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','search.png')\r\n    search_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','search-1.png')\r\n\r\n    playlist1 = os.path.join(os.path.dirname('Back'), 'Front','resources','img','playlist1.png')\r\n    playlist2 = os.path.join(os.path.dirname('Back'), 'Front','resources','img','playlist2.png')\r\n\r\n    add_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','add.png')\r\n    add_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','add_hover.png')\r\n    \r\n    ep_example = os.path.join(os.path.dirname('Back'), 'Front','resources','img','download_example.png')\r\n\r\n    #Definição de Cores:\r\n    color_yellow = '#FEC200' #Amarelo padrão Podfy\r\n    color_gray ='#4F5357' # Cinza padrão Podfy\r\n    bg_dark_default = '#121212' #Preto padrão para background\r\n    bg_dark_lighter = '#252525' #Preto levemente mais claro para background\r\n\r\n    \r\n    #Definição de fontes para o KivyMD\r\n    def font_importing(self):\r\n\r\n        LabelBase.register( name=\"InterMedium\", fn_regular = self.inter_medium)\r\n        theme_font_styles.append('InterMedium')\r\n        self.theme_cls.font_styles[\"InterMedium\"] = [\"InterMedium\", 16, False, 0.15]\r\n\r\n        LabelBase.register( name=\"InterSemibold\", fn_regular = self.inter_semibold)\r\n        theme_font_styles.append('InterSemibold')\r\n        self.theme_cls.font_styles[\"InterSemibold\"] = [\"InterSemibold\", 14, False, 0.15]\r\n    \r\n        LabelBase.register( name=\"InterBold\", fn_regular = self.inter_bold)\r\n        theme_font_styles.append('InterBold')\r\n        self.theme_cls.font_styles[\"InterBold\"] = [\"InterBold\", 16, False, 0.15]\r\n\r\n    \r\n    def build(self):\r\n        \r\n        self.font_importing()\r\n        sm = WindowManager()\r\n        sm.current = 'login_screen'\r\n\r\n        self.theme_cls.colors = colors #Substitui a paleta de cores pela nova definida em utils\r\n        self.theme_cls.primary_palette = \"Yellow\"\r\n        self.theme_cls.primary_hue = \"50\"\r\n        self.theme_cls.theme_style = 'Dark'\r\n        self.title = \"Podfy\"\r\n        self.icon = self.app_icon\r\n\r\n        return sm\r\n\r\n    def users(json_data):\r\n        password = Back.Crypt.encrypt(json_data[\"pass\"])\r\n        passw = password.decode('utf-8')\r\n        print(passw)\r\n\r\n        try:\r\n            conn = sql.connect('database.db')\r\n            cur = conn.cursor()\r\n            cur.execute(f'INSERT INTO users (name, email, CPF, password) VALUES (\"{json_data[\"name\"]}\", \"{json_data[\"email\"]}\", \"{json_data[\"cpf\"]}\", \"{password}\")')\r\n            conn.commit()\r\n\r\n            return f'Usuário: {json_data[\"name\"]} inserido com o emails: {json_data[\"email\"]}, cpf: {json_data[\"cpf\"]} e senha: password: {password}'\r\n\r\n        except Exception as e:\r\n            return(str(e))\r\n\r\ndef createdb():\r\n    if not os.path.exists('database.db'):\r\n        conn = sql.connect('database.db')\r\n        conn.execute(\r\n            'CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, status BOOLEAN, icon TEXT, email TEXT, password BLOB, CPF INTEGER)')\r\n        conn.commit()\r\n        conn.close()\r\n        app.logger.info('Database created')\r\n        return 'Database created'\r\n    else:\r\n        return 'Database already exists'\r\n\r\n@app.route('/cadastro/usuarios', methods=['POST'])\r\ndef cadastro_usuarios():\r\n    json_data = flask_request.get_json()\r\n    if json_data:\r\n        return Back.Cadastro.users(json_data)\r\n\r\n    #if __name__ == '__main__':\r\n    #    createdb()\r\n    #    app.run(debug=True, port=80)\r\n\r\n\r\nclass WindowManager(ScreenManager):\r\n    # Classe Root que vai lidar com transição de Screens\r\n    pass\r\n\r\nclass ConfigScreen(Screen):\r\n    pass\r\n\r\nclass CustomizeScreen(Screen):\r\n    pass\r\n\r\nclass SearchScreen(Screen):\r\n    pass\r\n\r\nclass PlaylistScreen(Screen):\r\n    pass\r\n\r\n\r\nclass HomeScreen(Screen):\r\n    pass\r\n\r\nclass DownloadScreen(Screen):\r\n    epName = ObjectProperty(None)\r\n    epDesc = ObjectProperty(None)\r\n    epAuthor = ObjectProperty(None)\r\n\r\n\r\n\r\n\r\n\r\nclass ListItem (BoxLayout):\r\n    itemName = StringProperty('')\r\n    imgRef = StringProperty('')\r\n    authorName = StringProperty('')\r\n\r\n\r\nclass DownloadList (BoxLayout):\r\n    def __init__(self, **kwargs): #Quando uma instância da classe DownloadList for criada, a função __init__ é chamada automaticamente!\r\n        super().__init__(**kwargs)   \r\n        \r\n        #Declaração de uma lista com o formato: (nome, imagem, autor)\r\n        self.list = (  ('Item1', Podfy.ep_example, 'autor1') , ('Item2', Podfy.ep_example, 'autor2') , ('Item3', Podfy.ep_example, 'autor3') , ('Item4', Podfy.ep_example, 'autor4'), ('Item5', Podfy.ep_example, 'autor5')  )\r\n\r\n        for name, local, author in self.list:\r\n            item = ListItem (itemName = name, imgRef = local, authorName = author) #Instância da classe ItemList vai receber os dados\r\n            self.add_widget(item) #Adiciona o item com id box_layout com os dados inseridos\r\n\r\n\r\n\r\n#################################################################\r\n# Pra contextualizar:\r\n\r\n# a classe DownloadList é um BoxLayout. Quando uma instância dela for criada,\r\n# ela vai chamar a função __init__ com os seguintes passos:\r\n\r\n# - Vai criar uma lista de episódios com varios itens no formato (nome,imagem,autor)\r\n# - Pra cada item, vai associar com uma instância da classe ListItem (Que contém esses\r\n# mesmos parâmetros inicializados como StringProperty)\r\n# - Vai adicionar cada instância da classe ListItem dentro da instancia da classe\r\n# DownloadList\r\n\r\n\r\n# Falta: Especificar certinho o tamanho da imagem, fontes, espaçamentos, etc...\r\n\r\n# Ver se o ScrollView ainda funciona. (Caso a classe DownloadList fosse do tipo\r\n# MDList ao invés de BoxLayout, funcionaria, mas por algum motivo todos os elementos\r\n# ficam agrupados dentro de uma única linha da lista)\r\n#################################################################
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Back/Podfy.py b/Back/Podfy.py
--- a/Back/Podfy.py	(revision 80c818b1fb69e5ed0e34dc7a5c2def3d84bb8186)
+++ b/Back/Podfy.py	(date 1656269415987)
@@ -12,69 +12,71 @@
 
 
 class Podfy(MDApp):
-
-    #Importação de Fontes
-    inter_regular = os.path.join(os.path.dirname('Back'), 'Front','resources', 'fontes', 'Inter', 'static', 'Inter-Regular.ttf')
-    inter_medium = os.path.join(os.path.dirname('Back'), 'Front','resources', 'fontes', 'Inter', 'static', 'Inter-Medium.ttf')
-    inter_semibold = os.path.join(os.path.dirname('Back'), 'Front','resources', 'fontes', 'Inter', 'static', 'Inter-SemiBold.ttf')
-    inter_bold = os.path.join(os.path.dirname('Back'), 'Front','resources', 'fontes', 'Inter', 'static', 'Inter-Bold.ttf')
+    # Importação de Fontes
+    inter_regular = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'fontes', 'Inter', 'static',
+                                 'Inter-Regular.ttf')
+    inter_medium = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'fontes', 'Inter', 'static',
+                                'Inter-Medium.ttf')
+    inter_semibold = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'fontes', 'Inter', 'static',
+                                  'Inter-SemiBold.ttf')
+    inter_bold = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'fontes', 'Inter', 'static',
+                              'Inter-Bold.ttf')
 
-    #Importação de imagens e ícones
-    podfy_logo_white = os.path.join (os.path.dirname('Back'), 'Front','resources', 'podfy-logo-whitebg.jpg')
-    podfy_mini_logo = os.path.join(os.path.dirname('Back'), 'Front','resources','img','bar-podfy-logo.png')
-    podfy_mini_logo_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','bar-podfy-logo_hover.png')
-    app_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','icon.png')
-    
-    user_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','profile_icon.png')
-    user_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','profile_icon_hover.png')
+    # Importação de imagens e ícones
+    podfy_logo_white = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'podfy-logo-whitebg.jpg')
+    podfy_mini_logo = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'bar-podfy-logo.png')
+    podfy_mini_logo_hover = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img',
+                                         'bar-podfy-logo_hover.png')
+    app_icon = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'icon.png')
+
+    user_icon = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'profile_icon.png')
+    user_icon_hover = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'profile_icon_hover.png')
 
-    home_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','home.png')
-    home_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','home-1.png')
+    home_icon = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'home.png')
+    home_icon_hover = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'home-1.png')
 
-    bars_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','bars.png')
-    bars_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','bars-1.png')
+    bars_icon = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'bars.png')
+    bars_icon_hover = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'bars-1.png')
 
-    search_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','search.png')
-    search_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','search-1.png')
+    search_icon = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'search.png')
+    search_icon_hover = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'search-1.png')
 
-    playlist1 = os.path.join(os.path.dirname('Back'), 'Front','resources','img','playlist1.png')
-    playlist2 = os.path.join(os.path.dirname('Back'), 'Front','resources','img','playlist2.png')
+    playlist1 = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'playlist1.png')
+    playlist2 = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'playlist2.png')
 
-    add_icon = os.path.join(os.path.dirname('Back'), 'Front','resources','img','add.png')
-    add_icon_hover = os.path.join(os.path.dirname('Back'), 'Front','resources','img','add_hover.png')
-    
-    ep_example = os.path.join(os.path.dirname('Back'), 'Front','resources','img','download_example.png')
+    add_icon = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'add.png')
+    add_icon_hover = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'add_hover.png')
+
+    ep_example = os.path.join(os.path.dirname('Back'), 'Front', 'resources', 'img', 'download_example.png')
 
-    #Definição de Cores:
-    color_yellow = '#FEC200' #Amarelo padrão Podfy
-    color_gray ='#4F5357' # Cinza padrão Podfy
-    bg_dark_default = '#121212' #Preto padrão para background
-    bg_dark_lighter = '#252525' #Preto levemente mais claro para background
+    # Definição de Cores:
+    color_yellow = '#FEC200'  # Amarelo padrão Podfy
+    color_gray = '#4F5357'  # Cinza padrão Podfy
+    bg_dark_default = '#121212'  # Preto padrão para background
+    bg_dark_lighter = '#252525'  # Preto levemente mais claro para background
 
-    
-    #Definição de fontes para o KivyMD
+    # Definição de fontes para o KivyMD
     def font_importing(self):
 
-        LabelBase.register( name="InterMedium", fn_regular = self.inter_medium)
+        LabelBase.register(name="InterMedium", fn_regular=self.inter_medium)
         theme_font_styles.append('InterMedium')
         self.theme_cls.font_styles["InterMedium"] = ["InterMedium", 16, False, 0.15]
 
-        LabelBase.register( name="InterSemibold", fn_regular = self.inter_semibold)
+        LabelBase.register(name="InterSemibold", fn_regular=self.inter_semibold)
         theme_font_styles.append('InterSemibold')
         self.theme_cls.font_styles["InterSemibold"] = ["InterSemibold", 14, False, 0.15]
-    
-        LabelBase.register( name="InterBold", fn_regular = self.inter_bold)
+
+        LabelBase.register(name="InterBold", fn_regular=self.inter_bold)
         theme_font_styles.append('InterBold')
         self.theme_cls.font_styles["InterBold"] = ["InterBold", 16, False, 0.15]
 
-    
     def build(self):
-        
+
         self.font_importing()
         sm = WindowManager()
         sm.current = 'login_screen'
 
-        self.theme_cls.colors = colors #Substitui a paleta de cores pela nova definida em utils
+        self.theme_cls.colors = colors  # Substitui a paleta de cores pela nova definida em utils
         self.theme_cls.primary_palette = "Yellow"
         self.theme_cls.primary_hue = "50"
         self.theme_cls.theme_style = 'Dark'
@@ -91,14 +93,16 @@
         try:
             conn = sql.connect('database.db')
             cur = conn.cursor()
-            cur.execute(f'INSERT INTO users (name, email, CPF, password) VALUES ("{json_data["name"]}", "{json_data["email"]}", "{json_data["cpf"]}", "{password}")')
+            cur.execute(
+                f'INSERT INTO users (name, email, CPF, password) VALUES ("{json_data["name"]}", "{json_data["email"]}", "{json_data["cpf"]}", "{password}")')
             conn.commit()
 
             return f'Usuário: {json_data["name"]} inserido com o emails: {json_data["email"]}, cpf: {json_data["cpf"]} e senha: password: {password}'
 
         except Exception as e:
-            return(str(e))
+            return (str(e))
 
+
 def createdb():
     if not os.path.exists('database.db'):
         conn = sql.connect('database.db')
@@ -111,13 +115,14 @@
     else:
         return 'Database already exists'
 
+
 @app.route('/cadastro/usuarios', methods=['POST'])
 def cadastro_usuarios():
     json_data = flask_request.get_json()
     if json_data:
         return Back.Cadastro.users(json_data)
 
-    #if __name__ == '__main__':
+    # if __name__ == '__main__':
     #    createdb()
     #    app.run(debug=True, port=80)
 
@@ -126,15 +131,19 @@
     # Classe Root que vai lidar com transição de Screens
     pass
 
+
 class ConfigScreen(Screen):
     pass
 
+
 class CustomizeScreen(Screen):
     pass
 
+
 class SearchScreen(Screen):
     pass
 
+
 class PlaylistScreen(Screen):
     pass
 
@@ -142,34 +151,34 @@
 class HomeScreen(Screen):
     pass
 
+
 class DownloadScreen(Screen):
     epName = ObjectProperty(None)
     epDesc = ObjectProperty(None)
     epAuthor = ObjectProperty(None)
 
 
-
-
-
-class ListItem (BoxLayout):
+class ListItem(BoxLayout):
     itemName = StringProperty('')
     imgRef = StringProperty('')
     authorName = StringProperty('')
 
 
-class DownloadList (BoxLayout):
-    def __init__(self, **kwargs): #Quando uma instância da classe DownloadList for criada, a função __init__ é chamada automaticamente!
-        super().__init__(**kwargs)   
-        
-        #Declaração de uma lista com o formato: (nome, imagem, autor)
-        self.list = (  ('Item1', Podfy.ep_example, 'autor1') , ('Item2', Podfy.ep_example, 'autor2') , ('Item3', Podfy.ep_example, 'autor3') , ('Item4', Podfy.ep_example, 'autor4'), ('Item5', Podfy.ep_example, 'autor5')  )
+class DownloadList(BoxLayout):
+    def __init__(self,
+                 **kwargs):  # Quando uma instância da classe DownloadList for criada, a função __init__ é chamada automaticamente!
+        super().__init__(**kwargs)
+
+        # Declaração de uma lista com o formato: (nome, imagem, autor)
+        self.list = (('Item1', Podfy.ep_example, 'autor1'), ('Item2', Podfy.ep_example, 'autor2'),
+                     ('Item3', Podfy.ep_example, 'autor3'), ('Item4', Podfy.ep_example, 'autor4'),
+                     ('Item5', Podfy.ep_example, 'autor5'))
 
         for name, local, author in self.list:
-            item = ListItem (itemName = name, imgRef = local, authorName = author) #Instância da classe ItemList vai receber os dados
-            self.add_widget(item) #Adiciona o item com id box_layout com os dados inseridos
+            item = ListItem(itemName=name, imgRef=local,
+                            authorName=author)  # Instância da classe ItemList vai receber os dados
+            self.add_widget(item)  # Adiciona o item com id box_layout com os dados inseridos
 
-
-
 #################################################################
 # Pra contextualizar:
 
@@ -188,4 +197,4 @@
 # Ver se o ScrollView ainda funciona. (Caso a classe DownloadList fosse do tipo
 # MDList ao invés de BoxLayout, funcionaria, mas por algum motivo todos os elementos
 # ficam agrupados dentro de uma única linha da lista)
-#################################################################
\ No newline at end of file
+#################################################################
Index: .idea/Backend-Podfy.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Backend-Podfy.iml b/.idea/Backend-Podfy.iml
new file mode 100644
--- /dev/null	(date 1656266993668)
+++ b/.idea/Backend-Podfy.iml	(date 1656266993668)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="NewModuleRootManager">
+    <orderEntry type="jdk" jdkName="Python 3.9 (ES)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
